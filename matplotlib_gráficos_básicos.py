# -*- coding: utf-8 -*-
"""Matplotlib - gráficos básicos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SPh7y-6I0y2g5LBrioeisH3RKWQ6Zp_z

# Desafio Central dos gráficos básicos do Matplotlib:
## Entendendo o Desempenho Anual de uma Megaloja de Eletrônicos

Nossa exploração da visualização de dados nos levará através das operações anuais de uma fictícia **Megaloja de Eletrônicos**. Este cenário nos permitirá entender como as vendas, gastos com publicidade, avaliações de clientes e outras métricas evoluem ao longo do tempo.

> **Nota:** Além do nosso exemplo central, nos aprofundaremos em conjuntos de dados menores e cenários específicos para ilustrar conceitos particulares de cada tipo de gráfico.
"""

import numpy as np
import pandas as pd

# Seed para garantir reprodutibilidade
np.random.seed(42)

# Meses
meses = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro']

# Vendas mensais
vendas_celulares = np.random.randint(50, 500, 12)
vendas_laptops = np.random.randint(10, 150, 12)
vendas_acessorios = np.random.randint(200, 1500, 12)

# Distribuição de preços dos produtos
precos_celulares = np.random.normal(loc=2500, scale=500, size=500).astype(int)
precos_laptops = np.random.normal(loc=5000, scale=800, size=150).astype(int)
precos_acessorios = np.random.normal(loc=150, scale=30, size=1500).astype(int)

# Gastos com publicidade
gastos_publicidade_online = np.random.randint(500, 2500, 12)
gastos_publicidade_offline = np.random.randint(1000, 5000, 12)
gastos_total_publicidade = gastos_publicidade_online + gastos_publicidade_offline

# Margem de lucro (%)
margem_lucro_celulares = np.random.uniform(10, 20, 12)
margem_lucro_laptops = np.random.uniform(15, 25, 12)
margem_lucro_acessorios = np.random.uniform(5, 15, 12)

# Avaliações de clientes (escala de 1 a 5)
avaliacoes = np.random.uniform(3, 5, 12)

# Criando o DataFrame
df = pd.DataFrame({
    'Mês': meses,
    'Vendas de Celulares': vendas_celulares,
    'Vendas de Laptops': vendas_laptops,
    'Vendas de Acessórios': vendas_acessorios,
    'Gastos com Publicidade Online (R$)': gastos_publicidade_online,
    'Gastos com Publicidade Offline (R$)': gastos_publicidade_offline,
    'Gastos Totais com Publicidade (R$)': gastos_total_publicidade,
    'Margem de Lucro Celulares (%)': margem_lucro_celulares,
    'Margem de Lucro Laptops (%)': margem_lucro_laptops,
    'Margem de Lucro Acessórios (%)': margem_lucro_acessorios,
    'Avaliação Média dos Clientes': avaliacoes
})

# Exibindo uma prévia do DataFrame
print(df)

"""---

### Iniciando nossa Jornada Visual

Agora que temos nosso conjunto de dados em mãos, é hora de mergulhar nas visualizações! Usaremos o Matplotlib para criar uma variedade de gráficos que destacam diferentes aspectos do nosso conjunto de dados, desde vendas mensais até satisfação do cliente. Cada gráfico ou visualização oferece uma perspectiva única, ajudando-nos a entender e comunicar eficazmente as histórias por trás dos números.

Prepare-se para uma viagem visual através do desempenho anual da Megaloja de Eletrônicos!

---

Linha - Exemplo Prático Simples:
Cenário: Suponha que temos um pequeno negócio e queremos visualizar as vendas mensais durante um ano.
"""

import matplotlib.pyplot as plt
#Nesta linha, estamos importando a biblioteca Matplotlib, que é uma das bibliotecas mais populares em Python para a criação de gráficos e visualizações.

# Dados
meses = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez']
vendas = [120, 140, 155, 143, 160, 170, 165, 178, 190, 210, 220, 230]
#Aqui, estamos definindo os dados que serão usados no gráfico. meses é uma lista que contém os meses do ano abreviados e vendas é uma lista que contém o número de vendas (em unidades) para cada mês.

# Gráfico
plt.figure(figsize=(10,5))
#Nesta linha, estamos definindo o tamanho da figura do gráfico. O primeiro valor 10 define a largura e o segundo valor 5 define a altura (ambos em polegadas).

plt.plot(meses, vendas, marker='o', linestyle='-', color='b')
#Aqui, estamos usando a função plot() para criar o gráfico de linha:
#meses: eixo x do gráfico (meses do ano).
#vendas: eixo y do gráfico (quantidade vendida).
#marker='o': define que queremos marcar cada ponto de dado com um círculo.
#linestyle='-': define o estilo da linha como contínuo.
#color='b': define a cor da linha como azul.

plt.title("Vendas Mensais em 2023")
#Define o título do gráfico como "Vendas Mensais em 2023".

plt.xlabel("Mês")
plt.ylabel("Vendas (em unidades)")
#Estas duas linhas definem os rótulos dos eixos x e y, respectivamente.

plt.grid(True)
#Isso adiciona uma grade ao gráfico, facilitando a leitura dos valores em ambos os eixos.

plt.show()
#Finalmente, a função show() é chamada para exibir o gráfico. Sem esta linha, o gráfico não seria mostrado ao usuário.

"""Linha - Desafio Central - Gráfico Mais Elaborado:
Cenário: Vamos visualizar as vendas mensais da Megaloja de Eletrônicos ao longo de três anos.
"""

import matplotlib.pyplot as plt
#Nesta linha, estamos importando a biblioteca Matplotlib, que é uma das bibliotecas mais populares em Python para a criação de gráficos e visualizações.

# Configuração do gráfico
plt.figure(figsize=(14,7))
#Nesta linha, estamos definindo o tamanho da figura do gráfico. O valor 14 representa a largura e 7 a altura (ambos em polegadas).

plt.plot(df['Mês'], df['Vendas de Celulares'], marker='o', label='Vendas de Celulares', color='blue', linestyle='--')
#Aqui, estamos desenhando a linha que representa as vendas de celulares por mês:
#df['Mês']: eixo x do gráfico (meses do ano).
#df['Vendas de Celulares']: eixo y do gráfico (vendas de celulares).
#marker='o': usa círculos para marcar cada ponto de dado no gráfico.
#label='Vendas de Celulares': rótulo dessa linha, que aparecerá na legenda.
#color='blue': define a cor da linha como azul.
#linestyle='--': define o estilo da linha como tracejada.

plt.plot(df['Mês'], df['Vendas de Laptops'], marker='o', label='Vendas de Laptops', color='red', linestyle='-')
#Semelhante à linha anterior, mas esta representa as vendas de laptops:
#A cor é definida como vermelho.
#O estilo da linha é contínuo.

plt.plot(df['Mês'], df['Vendas de Acessórios'], marker='o', label='Vendas de Acessórios', color='green', linestyle='-.')
#Esta linha representa as vendas de acessórios:
#A cor é verde.
#O estilo da linha é traço-ponto.

plt.title('Vendas Mensais da Megaloja de Eletrônicos em 2023')
#Define o título do gráfico.

plt.xlabel('Mês')
plt.ylabel('Quantidade Vendida')
#Definem os rótulos dos eixos x e y, respectivamente.

plt.xticks(rotation=45)
#Roda os rótulos do eixo x em 45 graus, facilitando a leitura quando os rótulos são longos ou se sobrepõem.

plt.legend()
#Adiciona uma legenda ao gráfico, permitindo identificar cada linha pela cor e pelo estilo.

plt.grid(True, which='both', linestyle='--', linewidth=0.5)
#Adiciona uma grade ao gráfico para facilitar a leitura:
#which='both': exibe grades tanto para os valores principais quanto para os secundários.
#linestyle='--': define o estilo da linha da grade como tracejada.
#linewidth=0.5: define a espessura da linha da grade.

plt.tight_layout()
#Ajusta o layout do gráfico, garantindo que tudo seja exibido de maneira adequada e sem sobreposição.

plt.show()
#Exibe o gráfico. Esta é a chamada final que renderiza tudo o que foi definido anteriormente e mostra o gráfico ao usuário.

"""Exemplo Prático Simples: Gráfico de Barras para Comparação de Vendas Anuais de Livrarias
Cenário: Em uma cidade com três populares livrarias - Alfa, Bravo e Charlie - deseja-se comparar as vendas anuais destas estabelecimentos durante o ano de 2023. A intenção é visualizar de forma clara qual livraria teve a melhor performance de vendas durante o ano.
"""

import matplotlib.pyplot as plt
# Nesta linha, estamos importando a biblioteca Matplotlib, que é uma das bibliotecas mais populares em Python para visualizações gráficas.

# Dados
livrarias = ['Alfa', 'Bravo', 'Charlie']
vendas_2023 = [45000, 49000, 43000]
# Aqui, definimos os dados que serão exibidos no gráfico. 'livrarias' é uma lista com os nomes das três livrarias. 'vendas_2023' contém o número de livros vendidos (em unidades) por cada livraria em 2023.

# Gráfico
plt.figure(figsize=(8,6))
# Definindo o tamanho da figura do gráfico. A largura é definida como 8 polegadas e a altura como 6 polegadas.

plt.bar(livrarias, vendas_2023, color=['cyan', 'magenta', 'yellow'])
# Utilizando a função bar() para criar o gráfico de barras:
# - 'livrarias' representa o eixo x do gráfico (nomes das livrarias).
# - 'vendas_2023' representa o eixo y (quantidade vendida em 2023).
# - 'color' define uma cor específica para cada barra.

plt.title("Vendas Anuais de Livrarias em 2023")
# Estabelecendo o título do gráfico.

plt.xlabel("Livrarias")
plt.ylabel("Vendas (em unidades)")
# Definindo os rótulos dos eixos x e y.

plt.grid(axis='y')
# Adicionando uma grade horizontal para facilitar a leitura dos valores no eixo y.

plt.show()
# Exibindo o gráfico. Sem esta linha, o gráfico não seria visualizado.

import matplotlib.pyplot as plt

# Definindo o tamanho da figura
plt.figure(figsize=(15,10))

# Criando gráfico de barras empilhadas para as vendas
bar_width = 0.35
index = np.arange(len(meses))
bar1 = plt.bar(index, df['Vendas de Celulares'], bar_width, label='Celulares', color='b', alpha=0.7)
bar2 = plt.bar(index, df['Vendas de Laptops'], bar_width, label='Laptops', color='r', alpha=0.7, bottom=df['Vendas de Celulares'])
bar3 = plt.bar(index, df['Vendas de Acessórios'], bar_width, label='Acessórios', color='g', alpha=0.7, bottom=df['Vendas de Celulares'] + df['Vendas de Laptops'])

# Adicionando linha para gastos totais com publicidade
plt.plot(df['Mês'], df['Gastos Totais com Publicidade (R$)'], color='c', marker='o', linestyle='-', linewidth=2, label='Gastos com Publicidade (R$)')

# Adicionando linha secundária para avaliações dos clientes
plt.twinx().plot(df['Mês'], df['Avaliação Média dos Clientes'], color='m', marker='D', linestyle='--', linewidth=2, label='Avaliação Média dos Clientes')

# Título e rótulos
plt.title('Vendas, Gastos com Publicidade e Avaliação dos Clientes por Mês em 2023')
plt.xlabel('Mês')
plt.ylabel('Quantidade Vendida e Gastos em R$')
plt.xticks(index, df['Mês'])

# Legendas
plt.legend(loc='upper left')

plt.tight_layout()
plt.show()

"""Exemplo Prático Simples: Uma Visualização da Distribuição dos Salários
Imagine que você é um analista de RH em uma grande empresa e foi encarregado de analisar a distribuição dos salários de seus funcionários para entender melhor como eles estão distribuídos e identificar possíveis desigualdades ou padrões. O histograma é a ferramenta perfeita para essa tarefa.
"""

import matplotlib.pyplot as plt
# Aqui, estamos importando a biblioteca Matplotlib, que é uma das principais bibliotecas em Python para visualização de dados.

# Dados
salarios = [2500, 2700, 2800, 3000, 3200, 3500, 3700, 4000, 4200, 4500, 4800, 5000, 5300, 5500, 5800, 6000, 6500, 7000, 7500, 8000]
# Nesta linha, temos uma lista de salários (em reais) de uma amostra de funcionários da empresa.

# Gráfico
plt.figure(figsize=(10,5))
# Estamos definindo o tamanho do gráfico. A figura terá uma largura de 10 polegadas e altura de 5 polegadas.

plt.hist(salarios, bins=8, color='purple', edgecolor='black')
# A função hist() é usada para criar o histograma:
# salarios: os dados que queremos visualizar.
# bins=8: número de intervalos (ou classes) em que os dados serão divididos.
# color='purple': define a cor das barras como roxo.
# edgecolor='black': define a cor das bordas das barras como preto.

plt.title("Distribuição dos Salários dos Funcionários em 2023")
# Define o título do gráfico.

plt.xlabel("Faixas de Salário")
plt.ylabel("Número de Funcionários")
# Estas duas linhas definem os rótulos dos eixos x e y, respectivamente.

plt.grid(axis='y')
# Adiciona linhas de grade horizontais ao gráfico, facilitando a leitura dos valores no eixo y.

plt.show()
# A função show() é invocada para exibir o gráfico. Sem esta linha, o gráfico não seria mostrado.

"""Desafio Central: Analisando a Performance de uma Loja de Eletrônicos
Resumo do Cenário: Você é um cientista de dados em uma grande loja de eletrônicos e foi encarregado de analisar o desempenho de vendas e publicidade da empresa ao longo de um ano. Para isso, você coletou informações mensais sobre as vendas de três categorias de produtos (celulares, laptops e acessórios), os gastos com publicidade (tanto online quanto offline) e a margem de lucro de cada categoria. Além disso, você tem dados sobre as avaliações dos clientes. Com base nesses dados, você deseja criar visualizações que ajudem a identificar padrões, tendências e áreas de oportunidade ou preocupação.
"""

import numpy as np
import pandas as pd

# ... [Código de geração de dados omitido para brevidade]

# Gráfico complexo de análise
import matplotlib.pyplot as plt

fig, ax1 = plt.subplots(figsize=(15, 7))

# Criando um gráfico de barras empilhadas para as vendas
df.set_index('Mês')[['Vendas de Celulares', 'Vendas de Laptops', 'Vendas de Acessórios']].plot(kind='bar', stacked=True, ax=ax1, position=1, width=0.4)
ax1.set_ylabel('Total de Vendas', color='blue')

# Criando um segundo eixo para representar os gastos com publicidade
ax2 = ax1.twinx()
df.set_index('Mês')['Gastos Totais com Publicidade (R$)'].plot(kind='line', marker='o', ax=ax2, color='red', linewidth=2)
ax2.set_ylabel('Gastos com Publicidade (R$)', color='red')

# Adicionando título e legendas
plt.title("Vendas Mensais e Gastos com Publicidade em 2023")
ax1.legend(loc='upper left')
ax2.legend(loc='upper right')

plt.show()

"""Exemplo Prático Simples: Visualizando Relações em Um Olhar
Imagine que você é um analista de vendas de uma grande empresa de eletrônicos e está interessado em entender a relação entre o investimento em publicidade online e as vendas totais de um produto específico. O gráfico de dispersão pode ser uma ferramenta perfeita para essa investigação.
"""

import matplotlib.pyplot as plt
# Nesta linha, estamos importando a biblioteca Matplotlib, que é uma das bibliotecas mais populares em Python para a criação de gráficos e visualizações.

# Dados
investimento_publicidade = [500, 800, 1000, 600, 1200, 1100, 900, 750, 950, 1050, 1150, 1300]
vendas_produto = [100, 150, 200, 110, 240, 220, 180, 165, 190, 210, 230, 250]
# Aqui, estamos definindo os dados que serão usados no gráfico. investimento_publicidade é uma lista que contém valores de investimento em publicidade online para cada mês e vendas_produto é uma lista com o número de produtos vendidos em cada mês.

# Gráfico
plt.figure(figsize=(10,5))
# Nesta linha, estamos definindo o tamanho da figura do gráfico. O primeiro valor 10 define a largura e o segundo valor 5 define a altura (ambos em polegadas).

plt.scatter(investimento_publicidade, vendas_produto, color='r', marker='o')
# Aqui, estamos usando a função scatter() para criar o gráfico de dispersão:
# investimento_publicidade: eixo x do gráfico (valores de investimento).
# vendas_produto: eixo y do gráfico (quantidade vendida).
# color='r': define a cor dos pontos como vermelho.
# marker='o': define que queremos marcar cada ponto de dado com um círculo.

plt.title("Relação entre Investimento em Publicidade e Vendas em 2023")
# Define o título do gráfico.

plt.xlabel("Investimento em Publicidade Online (R$)")
plt.ylabel("Vendas do Produto (em unidades)")
# Estas duas linhas definem os rótulos dos eixos x e y, respectivamente.

plt.grid(True)
# Isso adiciona uma grade ao gráfico, facilitando a leitura dos valores em ambos os eixos.

plt.show()
# Finalmente, a função show() é chamada para exibir o gráfico. Sem esta linha, o gráfico não seria mostrado ao usuário.

"""Desafio Central: Analisando a Relação Entre Vendas e Investimento em Publicidade

Resumo do Cenário:
Você é um Data Analyst de uma famosa empresa de eletrônicos. A empresa está tentando entender como seu investimento em publicidade afeta as vendas de seus produtos. Especificamente, você deseja investigar se um aumento nos gastos com publicidade resulta em um aumento nas vendas de celulares, laptops e acessórios. Para fazer isso, você decide criar um gráfico de dispersão.
"""

import matplotlib.pyplot as plt

# Configurando o tamanho da figura
plt.figure(figsize=(15,7))

# Gráfico de dispersão para cada produto
plt.scatter(df['Gastos Totais com Publicidade (R$)'], df['Vendas de Celulares'], color='blue', label='Celulares')
plt.scatter(df['Gastos Totais com Publicidade (R$)'], df['Vendas de Laptops'], color='green', label='Laptops')
plt.scatter(df['Gastos Totais com Publicidade (R$)'], df['Vendas de Acessórios'], color='red', label='Acessórios')

# Título, rótulos e legenda
plt.title("Relação entre Gastos com Publicidade e Vendas de Produtos em 2023")
plt.xlabel("Gastos Totais com Publicidade (R$)")
plt.ylabel("Número de Unidades Vendidas")
plt.legend(loc="upper left")

# Mostrando o gráfico
plt.show()

"""Exemplo Prático Simples:  Distribuição de Vendas por Categoria

Suponha que temos dados de vendas mensais de uma loja de eletrônicos em 2023 e queremos visualizar a distribuição das vendas por categoria de produtos: celulares, laptops e acessórios.
"""

import matplotlib.pyplot as plt

# Dados
categorias = ['Celulares', 'Laptops', 'Acessórios']
vendas_por_categoria = [4500, 3500, 1200]
cores = ['gold', 'lightcoral', 'lightskyblue']
explodir = (0.1, 0, 0)
# Definição dos Dados: Definimos os dados que serão usados no gráfico. categorias é uma lista que contém as categorias de produtos, vendas_por_categoria é uma lista que contém o número de vendas correspondente a cada categoria, cores é uma lista que define as cores para as fatias do gráfico, e explodir é uma tupla que define o destaque da fatia "Celulares".

# Gráfico de Pizza (Torta)
plt.figure(figsize=(6, 6))
# Configuração da Figura: Definimos o tamanho da figura do gráfico. Neste caso, a figura é um quadrado com 6 polegadas de largura e 6 polegadas de altura.

plt.pie(vendas_por_categoria, labels=categorias, autopct='%1.1f%%', startangle=140, colors=cores, explode=explodir)
# Criação do Gráfico de Pizza: Usamos a função pie() para criar o gráfico de pizza.
# vendas_por_categoria: Os valores a serem representados no gráfico.
# labels=categorias: Os rótulos das categorias que aparecerão no gráfico.
# autopct='%1.1f%%': Define como exibir as porcentagens de vendas em cada fatia do gráfico com uma casa decimal.
# startangle=140: Define o ângulo inicial da primeira fatia do gráfico.
# colors=cores: Define as cores das fatias do gráfico.
# explode=explodir: Define o destaque da fatia "Celulares".

plt.title("Distribuição de Vendas por Categoria")
# Título do Gráfico: Definimos o título do gráfico como "Distribuição de Vendas por Categoria".

plt.show()
# Exibição do Gráfico: A função show() é chamada para exibir o gráfico. Sem esta linha, o gráfico não seria mostrado ao usuário.

"""Desafio Central: Analisando a Relação Entre Vendas e Investimento em Publicidade

Resumo do Cenário: Você é um Data Analyst de uma famosa empresa de eletrônicos. A empresa está tentando entender como seu investimento em publicidade afeta as vendas de seus produtos. Especificamente, você deseja investigar se um aumento nos gastos com publicidade resulta em um aumento nas vendas de celulares, laptops e acessórios. Para fazer isso, você decide criar um gráfico de dispersão.
"""

# Dados para o gráfico de pizza
vendas_por_categoria = [
    df['Vendas de Celulares'].sum(),
    df['Vendas de Laptops'].sum(),
    df['Vendas de Acessórios'].sum()
]

categorias = ['Celulares', 'Laptops', 'Acessórios']
cores = ['gold', 'lightcoral', 'lightskyblue']
explodir = (0.1, 0, 0)  # Destacar a fatia "Celulares"

# Gráfico de Pizza
plt.figure(figsize=(6, 6))
plt.pie(vendas_por_categoria, labels=categorias, autopct='%1.1f%%', startangle=140, colors=cores, explode=explodir)
plt.title("Distribuição de Vendas por Categoria")
plt.show()