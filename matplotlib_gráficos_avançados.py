# -*- coding: utf-8 -*-
"""Matplotlib - gráficos avançados.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hQGEP-1jIpBa-FizvgqzlANxeiCr83ou

# Desafio Central: Análise Climática da Cidade de Meteorópolis

Da mesma maneira que abordamos o primeiro conjunto de gráficos, com um desafio principal seguido de exemplos pontuais, prosseguiremos nesse método para exemplificar os gráficos subsequentes.

Meteorópolis é uma cidade fictícia situada entre montanhas e apresenta um microclima peculiar. A cidade está posicionada de tal forma que cada uma das quatro regiões (Norte, Sul, Leste, Oeste) apresenta variações climáticas específicas ao longo do ano. Isso torna a análise climática dessa cidade um desafio, mas também uma oportunidade única para estudar variações climáticas micro-regionais.

Dados:

Meses do ano (para servir como referência temporal)
Temperaturas médias mensais
Precipitação mensal
Velocidade média do vento por mês
Direção predominante do vento por mês (em graus, para o gráfico polar)
Erro padrão para as temperaturas (para as barras de erro)
Divisão da precipitação por tipo: chuva, neve e granizo (para as barras empilhadas)

Dados adicionais:

 Além dos dados previamente mencionados, consideraremos agora:
Temperatura, precipitação e vento para cada uma das quatro regiões da cidade.
Índice de UV mensal.
"""

import numpy as np
import pandas as pd

# Configurações iniciais
np.random.seed(42)
meses = ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"]
regioes = ['Norte', 'Sul', 'Leste', 'Oeste']

# Gerando dados para cada região
dfs = []

for regiao in regioes:
    temperaturas = np.random.uniform(0, 30, 12)
    erro_temperaturas = np.random.uniform(0.5, 3, 12)
    precipitacao = np.random.uniform(0, 200, 12)

    frac_chuva = np.random.uniform(0.4, 0.7, 12)
    frac_neve = np.random.uniform(0.1, 0.3, 12)
    frac_granizo = 1 - frac_chuva - frac_neve

    chuva = precipitacao * frac_chuva
    neve = precipitacao * frac_neve
    granizo = precipitacao * frac_granizo

    velocidade_vento = np.random.uniform(5, 25, 12)
    direcao_vento = np.random.uniform(0, 360, 12)
    indice_uv = np.random.uniform(0, 10, 12)

    df = pd.DataFrame({
        'Mês': meses,
        'Região': regiao,
        'Temperatura': temperaturas,
        'Erro Temp.': erro_temperaturas,
        'Precipitação': precipitacao,
        'Chuva': chuva,
        'Neve': neve,
        'Granizo': granizo,
        'Velocidade Vento': velocidade_vento,
        'Direção Vento': direcao_vento,
        'Índice UV': indice_uv
    })

    dfs.append(df)

# Combinando dados de todas as regiões
df_meteoropolis = pd.concat(dfs, ignore_index=True)

print(df_meteoropolis)

"""Com esses dados adicionais e o detalhamento por região, temos agora um conjunto de dados mais complexo e robusto. Este dataframe pode ser usado para criar visualizações ricas que exploram variações regionais, bem como tendências gerais em Meteorópolis. Se desejar, posso prosseguir com a geração de alguns dos gráficos avançados mencionados.

# Exemplo Prático Simples: Gráfico de Contorno

Imagine que estamos tentando visualizar os níveis de temperatura em uma área geográfica específica. Suponha que temos uma matriz de temperaturas coletadas de diferentes pontos, e queremos ver como essas temperaturas variam no espaço.

Neste exemplo, estamos visualizando uma superfície hipotética de variação de temperatura. Os contornos escuros e claros indicam regiões de diferentes temperaturas. A barra de cores à direita ajuda a entender os valores de temperatura associados a cada cor. Essa é uma maneira eficaz de visualizar como uma variável (neste caso, a temperatura) varia em um espaço bidimensional.
"""

import numpy as np
import matplotlib.pyplot as plt
# Nesta linha, estamos importando as bibliotecas NumPy e Matplotlib. NumPy é uma biblioteca que permite a manipulação eficiente de arrays, e Matplotlib é a biblioteca que usamos para visualizar os dados.

# Dados
x = np.linspace(-5, 5, 100)
y = np.linspace(-5, 5, 100)
X, Y = np.meshgrid(x, y)
Z = np.sin(np.sqrt(X**2 + Y**2))
# Aqui, estamos criando uma grade de valores para X e Y, e depois calculando um valor Z para cada ponto (X, Y) usando uma função sinusoidal. Esta é uma representação simples de "altos" e "baixos" em nossa superfície de temperatura.

# Gráfico
plt.figure(figsize=(10,6))
# Definindo o tamanho da figura.

contour = plt.contourf(X, Y, Z, 20, cmap='RdGy')
# Aqui, estamos usando a função contourf() para criar o gráfico de contorno:
# X, Y: coordenadas da grade.
# Z: valores da temperatura.
# 20: número de contornos que queremos desenhar.
# cmap='RdGy': define o mapa de cores como uma transição do vermelho ao cinza.

plt.colorbar()
# Isso adiciona uma barra de cores ao gráfico, indicando os valores de Z associados a cada cor.

plt.title("Variação de Temperatura em uma Região")
# Define o título do gráfico.

plt.xlabel("Coordenada X")
plt.ylabel("Coordenada Y")
# Definindo os rótulos dos eixos.

plt.grid(True)
# Adicionando uma grade ao gráfico.

plt.show()
# Exibindo o gráfico ao usuário.

"""# Desafio Central: Variações Climáticas em Meteorópolis

Meteorópolis é uma metrópole fictícia composta por quatro principais regiões: Norte, Sul, Leste e Oeste. Durante o ano, cada região apresenta variações significativas em seu clima, influenciadas não apenas pela temperatura, mas também por fatores como precipitação, velocidade e direção do vento, e índice UV. Para compreender melhor essas variações, coletamos dados mensais ao longo de um ano.

Nosso desafio agora é visualizar esses dados complexos de uma forma que permita a identificação rápida das tendências e padrões regionais e mensais. Dessa forma, tomadores de decisão e o público em geral poderão se preparar melhor para as variações do clima em Meteorópolis.

Visualização de Gráfico de Contorno para as Temperaturas de Meteorópolis:

Vamos criar um gráfico de contorno que mostra como a temperatura varia em Meteorópolis ao longo do ano e entre as regiões:
"""

import matplotlib.pyplot as plt

# Preparando dados
pivot_temperatura = df_meteoropolis.pivot_table(index='Região', columns='Mês', values='Temperatura', aggfunc=np.mean)

# Gráfico
plt.figure(figsize=(12,6))
contour = plt.contourf(pivot_temperatura.columns, pivot_temperatura.index, pivot_temperatura.values, 20, cmap='coolwarm')
plt.colorbar(label="Temperatura (°C)")
plt.title("Variação de Temperatura em Meteorópolis (2023)")
plt.xlabel("Mês")
plt.ylabel("Região")
plt.grid(True, which="both", linestyle="--", linewidth=0.5)
plt.xticks(rotation=45)
plt.tight_layout()

plt.show()

"""Neste gráfico, as cores representam diferentes faixas de temperatura. A representação permite identificar os meses mais quentes ou mais frios em cada região. A barra de cores à direita indica as temperaturas associadas a cada cor. Pode-se observar, por exemplo, que a região Norte tende a ser mais quente no meio do ano, enquanto a região Sul tem temperaturas mais amenas no mesmo período.

# Exemplo Prático Simples: Decifração da Incerteza

Imagine ser um cientista pesquisando o crescimento de uma certa espécie de planta sob diferentes condições de luz. Você observou o crescimento médio dessas plantas, mas, como é comum em pesquisa, houve variações nos resultados. Não seria útil ter uma ferramenta visual para apresentar tanto o crescimento médio quanto a variação observada? Aqui, entram as barras de erro!
"""

import matplotlib.pyplot as plt
# Estamos importando a biblioteca Matplotlib, a ferramenta padrão para visualização de dados em Python.

# Dados
dias = ['Dia 1', 'Dia 2', 'Dia 3', 'Dia 4', 'Dia 5']
crescimento_medio = [2, 4, 4.5, 5, 7]  # crescimento médio da planta em cm
erro = [0.5, 0.4, 0.6, 0.3, 0.9]  # variação (erro) observada no crescimento em cm
# Definindo os dados: 'dias' representam os dias da experiência, 'crescimento_medio' é a média de crescimento observada e 'erro' é a variação observada.

# Gráfico
plt.figure(figsize=(10,5))
# Determinando o tamanho da figura do gráfico.

plt.bar(dias, crescimento_medio, yerr=erro, color='g', capsize=5, alpha=0.7)
# Aqui, estamos usando a função bar() para criar um gráfico de barras com barras de erro:
# - dias: eixo x do gráfico.
# - crescimento_medio: altura das barras, representando o crescimento médio.
# - yerr=erro: define a altura das barras de erro.
# - color='g': cor verde para as barras.
# - capsize=5: tamanho da “tampa” nas extremidades das barras de erro.
# - alpha=0.7: transparência das barras para melhor visualização.

plt.title("Crescimento Médio de Plantas sob Diferentes Condições de Luz")
# Título do gráfico.

plt.xlabel("Dia")
plt.ylabel("Crescimento (em cm)")
# Definindo os rótulos dos eixos x e y.

plt.grid(axis='y', linestyle='--', alpha=0.7)
# Adicionando uma grade horizontal para facilitar a leitura.

plt.show()
# Exibindo o gráfico.

"""Este gráfico não apenas mostra o crescimento médio diário das plantas, mas também a incerteza associada a cada medição, representada pelas barras de erro. Isso fornece uma representação mais completa e honesta dos dados coletados. Em resumo, as barras de erro são uma maneira valiosa de comunicar a precisão e confiabilidade das medições em um gráfico.

# Desafio Central: Compreendendo a Variação Climática

No cenário fictício de uma cidade chamada Meteorópolis, os cientistas estão coletando dados meteorológicos de diferentes regiões da cidade para analisar as variações de temperatura, precipitação e outros parâmetros durante o ano. Devido à natureza complexa do clima e às diferentes condições ambientais nas regiões de Meteorópolis, os dados coletados têm variações inerentes. Para entender melhor estas variações e comunicá-las de forma eficaz, eles optam por usar gráficos com barras de erro.

Agora, vamos visualizar as temperaturas médias mensais e suas variações (erros) para cada região de Meteorópolis:
"""

import matplotlib.pyplot as plt

# Selecionando dados para a região Norte como exemplo
df_norte = df_meteoropolis[df_meteoropolis['Região'] == 'Norte']

plt.figure(figsize=(12,6))

# Plotando temperaturas médias com barras de erro
plt.errorbar(df_norte['Mês'], df_norte['Temperatura'], yerr=df_norte['Erro Temp.'],
             color='c', marker='o', linestyle='-', linewidth=1.5,
             capsize=5, label='Norte', alpha=0.8)

plt.title("Variação da Temperatura Média em Meteorópolis - Região Norte")
plt.xlabel("Mês")
plt.ylabel("Temperatura (°C)")
plt.grid(axis='y', linestyle='--', alpha=0.6)
plt.legend()

plt.show()

"""***Neste gráfico:***

Utilizamos a função errorbar() para criar um gráfico de linha com barras de erro.

df_norte['Mês'] é o eixo x, representando os meses do ano.
df_norte['Temperatura'] é o eixo y, mostrando a temperatura média para cada mês.
yerr=df_norte['Erro Temp.'] adiciona as barras de erro ao gráfico, indicando a variação observada em cada medição de temperatura.

A combinação de cores, estilos e marcadores foi escolhida para tornar a visualização clara e atraente.

Este gráfico não apenas fornece uma visão da variação da temperatura ao longo dos meses na região Norte, mas também dá uma ideia da incerteza ou variabilidade associada a cada medição. Tal representação visual permite uma análise mais aprofundada e informada dos dados climáticos de Meteorópolis.

**Mas também poderemos usar o subplot para analisarmos as 4 estações:**

A análise de dados climáticos tem sido uma parte crucial para entender as variações climáticas regionais e suas possíveis implicações. Em um mundo cada vez mais consciente das mudanças climáticas e de seus efeitos sobre ecossistemas e sociedades, a capacidade de visualizar esses dados de forma clara e concisa é essencial. Em Meteorópolis, observamos as variações da temperatura média nas quatro regiões principais: Norte, Sul, Leste e Oeste. Estas variações, apresentadas ao longo dos meses do ano, fornecem uma visão geral de como o clima se comporta em cada região e permite uma comparação direta entre elas.
"""

import matplotlib.pyplot as plt

# Criar uma figura e subplots
fig, axarr = plt.subplots(2, 2, figsize=(15,10))
fig.suptitle("Variação da Temperatura Média em Meteorópolis por Região")

# Uma lista das regiões para facilitar o loop
regioes = ['Norte', 'Sul', 'Leste', 'Oeste']

# Um loop para gerar gráficos para cada região
for index, regiao in enumerate(regioes):
    df_regiao = df_meteoropolis[df_meteoropolis['Região'] == regiao]

    # Determinar em qual subplot o gráfico deve ser plotado
    ax = axarr[index // 2, index % 2]

    ax.errorbar(df_regiao['Mês'], df_regiao['Temperatura'], yerr=df_regiao['Erro Temp.'],
                color='c', marker='o', linestyle='-', linewidth=1.5,
                capsize=5, label=regiao, alpha=0.8)

    ax.set_title(regiao)
    ax.set_xlabel("Mês")
    ax.set_ylabel("Temperatura (°C)")
    ax.grid(axis='y', linestyle='--', alpha=0.6)
    ax.legend()

# Ajuste automático do layout
plt.tight_layout()
plt.subplots_adjust(top=0.90)

plt.show()

"""Os gráficos apresentados fornecem uma visão abrangente da variação da temperatura média em Meteorópolis por região. Estas visualizações são cruciais não apenas para meteorologistas e cientistas, mas também para planejadores urbanos, agricultores e o público em geral. Eles ajudam a preparar e adaptar-se para as variações sazonais, antecipar possíveis desafios e tomar decisões informadas com base em padrões climáticos. A representação visual desses dados, através de gráficos de linha com barras de erro, oferece uma perspectiva imediata sobre a confiabilidade dos dados e as tendências gerais, facilitando a compreensão e a comunicação dos padrões climáticos em Meteorópolis. Ao continuar monitorando e analisando essas variações, podemos nos posicionar melhor para responder e adaptar-se às mudanças em nosso ambiente.

# Exemplo Prático Simples: Uma Visão Multi-dimensional
Em cenários onde temos múltiplas categorias de dados relacionadas a uma variável específica, o gráfico de barras empilhadas se torna uma ferramenta valiosa. Ele nos permite visualizar e comparar a composição de diferentes categorias dentro de um conjunto de dados, revelando padrões ocultos ou tendências emergentes em diferentes segmentos.
"""

import matplotlib.pyplot as plt
# Nesta linha, estamos importando a biblioteca Matplotlib, que é uma das bibliotecas mais populares em Python para a criação de gráficos e visualizações.

# Dados
meses = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez']
vendas_online = [50, 60, 55, 58, 60, 65, 68, 70, 75, 80, 85, 90]
vendas_loja = [70, 80, 100, 85, 100, 105, 97, 108, 115, 130, 135, 140]
# Aqui, estamos definindo os dados que serão usados no gráfico. A lista meses contém os meses do ano abreviados. vendas_online e vendas_loja são listas que contêm o número de vendas (em unidades) para cada mês, seja online ou em loja física, respectivamente.

# Gráfico
plt.figure(figsize=(10,5))
# Nesta linha, estamos definindo o tamanho da figura do gráfico. O primeiro valor 10 define a largura e o segundo valor 5 define a altura (ambos em polegadas).

# Gráfico de barras empilhadas
plt.bar(meses, vendas_online, color='b', label='Vendas Online')
plt.bar(meses, vendas_loja, bottom=vendas_online, color='r', label='Vendas na Loja')
# Aqui, estamos usando a função bar() duas vezes para criar as barras empilhadas:
# A primeira chamada cria a base das barras com vendas online e a segunda coloca as vendas da loja por cima.
# O argumento bottom na segunda chamada é usado para empilhar as barras.

plt.title("Vendas Mensais em 2023 por Canal")
# Define o título do gráfico.

plt.xlabel("Mês")
plt.ylabel("Vendas (em unidades)")
# Estas duas linhas definem os rótulos dos eixos x e y, respectivamente.

plt.legend()
# Isso adiciona uma legenda ao gráfico, indicando quais cores correspondem a cada canal de venda.

plt.grid(axis='y', linestyle='--', alpha=0.6)
# Isso adiciona uma grade horizontal ao gráfico para facilitar a leitura dos valores.

plt.show()
# Finalmente, a função show() é chamada para exibir o gráfico. Sem esta linha, o gráfico não seria mostrado ao usuário.

"""# Desafio Central: Analisando o Intrincado Clima de Meteorópolis

Meteorópolis é uma metrópole diversificada e enigmática. Situada em uma geografia complexa, a cidade é dividida em quatro regiões distintas: Norte, Sul, Leste e Oeste. O que torna Meteorópolis particularmente fascinante é que cada uma dessas regiões tem seu próprio microclima, com variações que vão desde temperaturas amenas até eventos climáticos extremos, como fortes chuvas, nevascas e até granizo.

Neste estudo, armados com um conjunto de dados meticulosamente coletados, buscamos desvendar os padrões climáticos de cada região ao longo de um ano. Usando ferramentas estatísticas e visuais, nossa missão é criar um panorama completo que nos permita entender as nuances das variações climáticas em Meteorópolis.

De temperaturas a índices UV, de direções de vento a tipos de precipitação, cada métrica nos oferece uma peça do quebra-cabeça. Ao combinar essas peças, esperamos não apenas compreender o clima desta cidade fascinante, mas também fornecer insights valiosos que podem ser usados em áreas tão diversas quanto planejamento urbano, agricultura e preparação para desastres.

Acompanhe-nos nesta jornada enquanto exploramos o código e as visualizações, mergulhando profundamente nas maravilhas climáticas de Meteorópolis.
"""

import matplotlib.pyplot as plt

# Selecionando dados para a região Norte como exemplo
df_norte = df_meteoropolis[df_meteoropolis['Região'] == 'Norte']

plt.figure(figsize=(12,6))

# Gráfico de barras empilhadas para precipitação
plt.bar(df_norte['Mês'], df_norte['Chuva'], label='Chuva', color='blue')
plt.bar(df_norte['Mês'], df_norte['Neve'], bottom=df_norte['Chuva'], label='Neve', color='white')
plt.bar(df_norte['Mês'], df_norte['Granizo'], bottom=df_norte['Chuva'] + df_norte['Neve'], label='Granizo', color='gray')

plt.title("Distribuição de Precipitação por Mês em Meteorópolis - Região Norte")
plt.xlabel("Mês")
plt.ylabel("Precipitação (mm)")
plt.legend()
plt.grid(axis='y', linestyle='--', alpha=0.6)

plt.show()

"""Neste código, usamos a função bar do Matplotlib três vezes para representar chuva, neve e granizo em barras empilhadas. O argumento bottom é utilizado para empilhar as barras, garantindo que cada segmento seja posicionado corretamente em relação ao anterior. Com essa visualização, podemos obter insights sobre a predominância de diferentes tipos de precipitação ao longo do ano na Região Norte de Meteorópolis.

Este é apenas um dos muitos insights que podem ser derivados deste conjunto de dados. A compreensão abrangente do clima de Meteorópolis pode ajudar em decisões de planejamento urbano, estratégias agrícolas e até mesmo na vida diária dos cidadãos.

# Exemplo Prático Simples: Navegando o Ciclo Anual de Vendas
Imagine que você é um analista de vendas de uma grande empresa e está interessado em visualizar o desempenho de vendas ao longo de um ano em uma representação cíclica. Usando o gráfico polar, você pode facilmente perceber tendências e padrões que ocorrem em certos períodos do ano.
"""

import matplotlib.pyplot as plt
# Nesta linha, estamos importando a biblioteca Matplotlib, amplamente utilizada em Python para a criação de gráficos e visualizações.

# Dados
meses = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez']
vendas = [120, 140, 155, 143, 160, 170, 165, 178, 190, 210, 220, 230]
# Aqui, estamos definindo os dados que serão usados no gráfico. 'meses' é uma lista com os meses do ano e 'vendas' é uma lista com o número de vendas (em unidades) para cada mês.

# Gráfico
plt.figure(figsize=(10,5))
# Esta linha define o tamanho da figura. O valor '10' refere-se à largura e '5' à altura (em polegadas).

ax = plt.subplot(111, projection='polar')
# Estamos criando um subplot com projeção polar, que nos permite criar o gráfico circular.

theta = np.linspace(0, 2 * np.pi, len(meses))
# Calculamos os ângulos para cada mês, distribuindo-os uniformemente ao longo de 360 graus (2 * pi radianos).

ax.plot(theta, vendas, marker='o', linestyle='-', color='b')
# Aqui, usamos a função plot() para desenhar o gráfico polar:
# theta: os ângulos correspondentes a cada mês.
# vendas: os valores de vendas para cada mês.
# marker, linestyle e color têm funções similares ao exemplo anterior, definindo a aparência do gráfico.

ax.set_xticks(theta)
ax.set_xticklabels(meses)
# Estas linhas definem os marcadores (meses) ao longo do círculo.

ax.set_title("Vendas Mensais em 2023")
# Define o título do gráfico.

plt.grid(True)
# Adiciona uma grade ao gráfico.

plt.show()
# Esta linha exibe o gráfico. Sem ela, o gráfico não apareceria.

"""
# dESAFIO cENTRAL: Navegando pelos Ventos e Climas de Meteorópolis

A cidade fictícia de Meteorópolis, situada em um mundo imaginário, possui quatro regiões distintas: Norte, Sul, Leste e Oeste. Cada uma dessas regiões tem suas particularidades climáticas, desde temperaturas distintas até padrões variados de precipitação. Como analista de dados meteorológicos, você foi encarregado de coletar e analisar as condições climáticas de cada região ao longo de um ano para entender os padrões e as diferenças entre elas.

Gráfico Polar: Visualizando as Direções dos Ventos de Meteorópolis

Vamos mergulhar no elemento "Direção do Vento" de nossos dados, utilizando um gráfico polar para ilustrar as direções predominantes dos ventos em cada região ao longo do ano."""

import matplotlib.pyplot as plt

# Selecione uma região específica (por exemplo, Norte) para visualização.
# Isso pode ser modificado para outras regiões conforme necessário.
df_norte = df_meteoropolis[df_meteoropolis['Região'] == 'Norte']

# Preparando o gráfico
plt.figure(figsize=(10,5))
ax = plt.subplot(111, projection='polar')

theta = np.radians(df_norte['Direção Vento'])
# Convertendo as direções do vento (em graus) para radianos para uso no gráfico polar.

radii = df_norte['Velocidade Vento']
# Usamos a velocidade do vento como o "raio" para cada ponto no gráfico, indicando quão forte é o vento naquela direção.

ax.plot(theta, radii, marker='o', linestyle='-', color='g')
# Aqui, estamos representando as direções e velocidades do vento em um gráfico polar.
# As direções do vento são representadas pelos ângulos (theta) e as velocidades pelo raio (radii).

ax.set_xticks(np.linspace(0, 2 * np.pi, 12))
ax.set_xticklabels(meses)
# Definindo as marcações e rótulos para representar cada mês do ano.

ax.set_title("Direções dos Ventos na Região Norte - 2023")
# Define o título do gráfico, focando na região Norte neste exemplo.

plt.show()
# Mostra o gráfico polar.

"""Com este gráfico, podemos ter uma visão instantânea das direções predominantes dos ventos em uma região de Meteorópolis ao longo de um ano. A intensidade do vento é também facilmente perceptível pela distância do centro: quanto mais distante do centro, mais forte é o vento. Assim, podemos identificar meses com ventos mais fortes e suas direções predominantes. Ao mudar a região no DataFrame df_norte, podemos fazer análises similares para as outras regiões de Meteorópolis.

# Exemplo Prático Simples: Explorando a Terra dos Três Eixos
Imagine que você é um pesquisador analisando a relação entre três diferentes variáveis: vendas, meses e uma terceira métrica, como o gasto em publicidade. Um gráfico tridimensional pode ser sua melhor ferramenta para visualizar essas relações complexas.
"""

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Dados
meses = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez']
vendas = [120, 140, 155, 143, 160, 170, 165, 178, 190, 210, 220, 230]
gasto_publicidade = [50, 55, 52, 56, 58, 60, 59, 62, 65, 70, 72, 74]

# Gráfico
fig = plt.figure(figsize=(10, 5))
ax = fig.add_subplot(111, projection='3d')

# Usar números em vez de meses para o eixo X
eixo_x_numerico = range(len(meses))
ax.scatter(eixo_x_numerico, vendas, gasto_publicidade, color='b', marker='o')

# Agora definimos os rótulos do eixo X para serem os meses
ax.set_xticks(eixo_x_numerico)
ax.set_xticklabels(meses)

ax.set_title("Vendas vs Gasto em Publicidade por Mês em 2023")
ax.set_xlabel("Mês")
ax.set_ylabel("Vendas (em unidades)")
ax.set_zlabel("Gasto em Publicidade ($)")

plt.show()

"""Com esse gráfico 3D, não apenas visualizamos as vendas ao longo dos meses, mas também como elas se relacionam com os gastos em publicidade. Isso pode ajudar a identificar tendências e tomar decisões informadas sobre futuros investimentos em marketing.

# Desafio Central: A Dança Tridimensional dos Elementos

Cenário:
Meteorópolis, uma cidade fictícia, está em um estudo intensivo sobre seu clima. Para isso, coletou-se dados meteorológicos ao longo de um ano nas quatro regiões principais da cidade: Norte, Sul, Leste e Oeste. Os cientistas desejam entender a variação da temperatura, precipitação e a direção do vento ao longo dos meses, em todas as regiões.

Nossa missão é visualizar esses dados em uma representação tridimensional, para que os cientistas possam discernir facilmente padrões e anomalias nos dados coletados.

Vamos aos passos do código:
"""

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Gráfico
fig = plt.figure(figsize=(15, 8))
ax = fig.add_subplot(111, projection='3d')
# Aqui, estamos criando a base para o nosso gráfico tridimensional, definindo seu tamanho e o tipo de projeção.

colors = {'Norte': 'red', 'Sul': 'blue', 'Leste': 'green', 'Oeste': 'yellow'}
# Um dicionário para definir cores diferentes para cada região.

eixo_x_numerico = range(len(meses))

for regiao, color in colors.items():
    subset = df_meteoropolis[df_meteoropolis['Região'] == regiao]
    ax.scatter(eixo_x_numerico, subset['Temperatura'], subset['Precipitação'], c=color, label=regiao, s=50)
    # Estamos filtrando os dados por região e plotando no gráfico 3D:
    # Eixo X mostra os meses do ano.
    # Eixo Y indica a temperatura média registrada.
    # Eixo Z representa a precipitação registrada.
    # A cor do ponto é determinada pela região.

# Agora definimos os rótulos do eixo X para serem os meses
ax.set_xticks(eixo_x_numerico)
ax.set_xticklabels(meses)

ax.set_title("Variação da Temperatura e Precipitação ao Longo dos Meses em Meteorópolis")
# Define o título do gráfico.

ax.set_xlabel("Mês")
ax.set_ylabel("Temperatura (°C)")
ax.set_zlabel("Precipitação (mm)")
# Rotulamos os eixos para claridade.

ax.legend()
# Mostra uma legenda para identificar as cores das regiões.

plt.show()
# Finalmente, o gráfico tridimensional é exibido.

"""Este gráfico 3D proporciona uma representação clara da variação da temperatura e precipitação nas quatro regiões de Meteorópolis ao longo do ano. Tal visualização pode desvendar relações interessantes entre as variáveis e ajudar os cientistas em suas análises climáticas."""